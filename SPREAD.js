//////////////////////////////////////////////// ОПЕРАТОР SPREAD ////////////////////////////////////////////////
const arr = [1, 3, 5];
const newArr = [7, 8, ...arr];
console.log(newArr); // [7, 8, 1, 3, 5]
// Оператор spread скопировал из одного массива в другой массив значения 1, 3, 5 с помощью оператора "..."(три точки).


const firstArr = [7, 8];
const secondArr = [1, 2];
const mergeArr = [...firstArr, ...secondArr];
console.log(mergeArr); // [7,8, 1, 2]
// Слияние двух массивов.


const firstObject = {
    firstName: 'Artem',
    secondName: 'Kravts'
}
const newObject = { ...firstObject, age: 32 }
console.log(newObject); // {firstName: 'Artem', secondName: 'Kravts', age: 32}
// Создаётся новый объект со свойстами из объекта "firstObject" и новым свойством "age".


function sumAll(...args) { // args — имя массива
    let sum = 0;
    for (let arg of args) sum += arg;
    return sum;
}
alert(sumAll(1)); // 1
alert(sumAll(1, 2)); // 3
alert(sumAll(1, 2, 3)); // 6
// Остаточные параметры могут быть обозначены через три точки .... Буквально это значит: «собери оставшиеся параметры и положи их в массив».
// Например, соберём все аргументы в массив args.


function showName(firstName, lastName, ...titles) {
    alert(firstName + ' ' + lastName); // Юлий Цезарь
    // Оставшиеся параметры пойдут в массив
    // titles = ["Консул", "Император"]
    alert(titles[0]); // Консул
    alert(titles[1]); // Император
    alert(titles.length); // 2
}
showName("Юлий", "Цезарь", "Консул", "Император");
// Мы можем положить первые несколько параметров в переменные, а остальные – собрать в массив.
// В примере выше первые два аргумента функции станут именем и фамилией, а третий и последующие превратятся в массив titles.


function showName() {
    alert(arguments.length);
    alert(arguments[0]);
    alert(arguments[1]);
    // Объект arguments можно перебирать
    // for (let arg of arguments) alert(arg);
}
// Вывод: 2, Юлий, Цезарь
showName("Юлий", "Цезарь");
// Вывод: 1, Илья, undefined (второго аргумента нет)
showName("Илья");
// Раньше в языке не было остаточных параметров, и получить все аргументы функции можно было только с помощью arguments. Этот способ всё ещё работает, мы можем найти его в старом коде.
//Но у него есть один недостаток. Хотя arguments похож на массив, и его тоже можно перебирать, это всё же не массив. Он не поддерживает методы массивов, поэтому мы не можем, например, вызвать arguments.map(...).
//К тому же, arguments всегда содержит все аргументы функции — мы не можем получить их часть. А остаточные параметры позволяют это сделать.
//Соответственно, для более удобной работы с аргументами лучше использовать остаточные параметры.
// Стрелочные функции не имеют "arguments". Если мы обратимся к arguments из стрелочной функции, то получим аргументы внешней «нормальной» функции.



  
//////////////////////////////////////////////// ОПЕРАТОР РАСШИРЕНИЯ ////////////////////////////////////////////////
let arr1 = [1, -2, 3, 4];
let arr2 = [8, 3, -8, 1];
alert(Math.max(1, ...arr1, 2, ...arr2, 25)); // 25
// Чтобы получить список параметров из массива нам поможет оператор расширения. Он похож на остаточные параметры – тоже использует ..., но делает совершенно противоположное.
// Когда ...arr используется при вызове функции, он «расширяет» перебираемый объект arr в список аргументов.
// Мы можем передать несколько итерируемых объектов, можем комбинировать оператор расширения с обычными значениями,  можно использовать и для слияния массивов.
// В примерах выше мы использовали массив, чтобы продемонстрировать свойства оператора расширения, но он работает с любым перебираемым объектом.


let str = "Привет";
alert([...str]); // П,р,и,в,е,т
/*Посмотрим, что происходит. Под капотом оператор расширения использует итераторы, чтобы перебирать элементы. Так же, как это делает for..of.
Цикл for..of перебирает строку как последовательность символов, поэтому из ...str получается "П", "р", "и", "в", "е", "т". Получившиеся символы собираются в массив при помощи стандартного объявления массива: [...str].
Для этой задачи мы можем использовать и Array.from. Он тоже преобразует перебираемый объект (такой как строка) в массив:
*/
let str = "Привет";
alert(Array.from(str)); // П,р,и,в,е,т 
/*
Array.from преобразует перебираемый объект в массив.
Результат аналогичен [...str].
Но между Array.from(obj) и [...obj] есть разница:
Array.from работает как с псевдомассивами, так и с итерируемыми объектами
Оператор расширения работает только с итерируемыми объектами
Выходит, что если нужно сделать из чего угодно массив, то Array.from — более универсальный метод.
*/





/*
ИТОГО
Когда мы видим "..." в коде, это могут быть как остаточные параметры, так и оператор расширения.

Как отличить их друг от друга:

Если ... располагается в конце списка параметров функции, то это «остаточные параметры». Он собирает остальные неуказанные аргументы и делает из них массив.
Если ... встретился в вызове функции или где-либо ещё, то это «оператор расширения». Он извлекает элементы из массива.
Полезно запомнить:

Остаточные параметры используются, чтобы создавать новые функции с неопределённым числом аргументов.
С помощью оператора расширения можно вставить массив в функцию, которая по умолчанию работает с обычным списком аргументов.
Вместе эти конструкции помогают легко преобразовывать наборы значений в массивы и обратно.

К аргументам функции можно обращаться и по-старому — через псевдомассив arguments.
*/